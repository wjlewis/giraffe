{"version":3,"sources":["tools/Option.ts","tools/Vec.ts","tools/Result.ts","tools/Rect.ts","tools/index.ts","state/misc/Selection.ts","state/misc/DragSubject.ts","state/misc/UndoRedo.ts","state/misc/OverlayState.ts","state/state.ts","state/actions.ts","Vertex.tsx","state/selectors.ts","state/middleware.ts","state/reducer.ts","Edge.tsx","BoxSelection.tsx","Actions.tsx","NewVertex.tsx","Overlay.tsx","App.tsx","hooks.ts","index.tsx"],"names":["OptionType","Vec","x","y","Math","sqrt","this","factor","rhs","target","denom","dot","Error","num","scale","crossLength","sign","len","length","angle","cos","sin","Option","type","value","fn","Some","None","match","some","none","out","ResultType","Result","ok","err","Ok","Err","Rect","corner1","corner2","minCorner","maxCorner","minX","min","minY","maxX","max","maxY","vec","padding","minDiff","minus","maxDiff","noOp","arrayToObj","xs","reduce","acc","id","classNames","args","map","arg","Object","keys","filter","key","String","join","SelectionType","Selection","vertexIds","Vertices","vertices","DragSubjectType","DragSubject","boxSelectionRootPos","vertexOffsets","edgeOffsets","edgeId","BoxSelection","NewVertex","boxSelection","EdgeControlPt","edgeControlPt","newVertex","rootPos","UndoRedo","emptyState","undoStack","redoStack","state","clone","slice","MAX_UNDOS","currentState","previousState","mostRecentState","OverlayStateType","OverlayState","graph","errors","Graph","Errors","EdgeDirection","StateContext","React","createContext","dispatch","ActionType","initGraph","byId","name","pos","wip","hovered","edges","startVertexId","endVertexId","controlPtPos","direction","Reverse","Forward","initState","ui","mousePos","selection","dragSubject","isMultiSelect","hasMoved","overlay","undoRedo","addVertex","AddVertex","removeVertices","RemoveVertices","payload","addEdge","AddEdge","removeEdge","RemoveEdge","commitCurrentGraphState","CommitCurrentGraphState","VERTEX_RADIUS","Vertex","props","useContext","isSelected","vertexId","includes","St","isInBoxSelection","rect","vertex","contains","isHovered","vertexId1","hasDuplicatedName","vertexName","Boolean","allVertices","find","isMissingName","radius","width","height","className","duplicate","missing","maxLength","placeholder","onChange","e","ChangeVertexName","selected","onMouseEnter","MouseEnterVertex","onMouseLeave","MouseLeaveVertex","onMouseDown","MouseDownVertex","cx","cy","r","fill","strokeWidth","vertexPos","selectedVertexIds","values","allEdges","nextVertexId","idsInUse","edgeFromEndpoints","vertexId2","from","ALPHABET","split","nextVertexName","namesInUse","unusedSingles","c","suffix","unused","n","vertexById","exportMathematica","duplicates","seen","dups","push","duplicateVertexNames","missingVertexNameCount","duplicateNames","formatted","start","end","dispatchKeyEvents","action","KeyDown","ShiftKeyDown","ctrlKey","metaKey","SelectAllVertices","Act","Sel","edge","CancelCurrentAction","Undo","Redo","reducer","MouseDownCanvas","reduceMouseDownCanvas","currentlySelectedVertexIds","allSelectedVertexIds","x1","mouseOffset","computeVertexOffsets","p","pq","pc","proj","perp","perpSign","crossSign","pqRatio","perpLen","computeEdgeOffset","computeEdgeOffsets","reduceMouseDownVertex","MouseDownEdgeControlPt","reduceMouseDownEdgeControlPt","MouseDownNewVertex","reduceMouseDownNewVertex","MouseUp","unwrap","commitVerticesAndEdges","containedVertexIds","selectVerticesInBoxSelection","commitEdges","reduceMouseUp","MouseMove","withMousePos","updatedVertices","plus","vertexWip","updatedEdges","normalize","edgeWip","updateEdgeAndVertexWips","updateEdgeWip","reduceMouseMove","reduceAddVertex","v","reduceRemoveVertices","startVertexPos","reduceAddEdge","updated","reduceRemoveEdge","reduceShiftKeyDown","KeyUp","reduceKeyUp","reduceCancelCurrentAction","allVertexIds","reduceSelectAllVertices","reduceChangeVertexName","reduceMouseEnterVertex","reduceMouseLeaveVertex","MouseEnterEdgeControlPt","reduceMouseEnterEdgeControlPt","MouseLeaveEdgeControlPt","reduceMouseLeaveEdgeControlPt","ToggleEdgeDirection","updatedEdge","toggleEdgeDirection","reduceToggleEdgeDirection","commit","reduceCommitCurrentGraphState","undo","undoRedoSelection","reduceUndo","redo","reduceRedo","OpenGraphOverlay","reduceOpenGraphOverlay","OpenErrorsOverlay","reduceOpenErrorsOverlay","DismissOverlay","reduceDismissOverlay","Arrow","isForward","arrowSpine","wing1","rotate","PI","wing2","w1","w2","d","stroke","Edge","q","m","l","edgeId1","onMouseUp","Actions","actions","addVertexAction","clickAction","common","onClick","href","rel","handleMouseDown","isNewVertex","Overlay","graphTextRef","useRef","useState","copying","setCopying","isNone","dismiss","currentTarget","copyToClipboard","current","input","focus","select","document","execCommand","setTimeout","ref","disabled","error","i","App","middlewares","useReducer","reverse","forEach","middleware","hostRef","bounds","setBounds","recomputeBounds","useCallback","getBoundingClientRect","useLayoutEffect","useEffect","window","addEventListener","removeEventListener","useBounds","onMove","left","top","handleMouseMove","clientX","clientY","useMousePos","handlers","onKeyDown","onKeyUp","handleKeyDown","handleKeyUp","body","useKeyboard","info","transform","Provider","xmlns","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fee97c39.chunk.js","sourcesContent":["export class Option<T> {\n  private type: OptionType;\n  private value?: T;\n\n  static Some<T>(value: T): Option<T> {\n    const out: Option<T> = new Option();\n    out.type = OptionType.Some;\n    out.value = value;\n    return out;\n  }\n\n  static None<T>(): Option<T> {\n    const out: Option<T> = new Option();\n    out.type = OptionType.None;\n    return out;\n  }\n\n  map<U>(fn: (value: T) => U): Option<U> {\n    switch (this.type) {\n      case OptionType.Some:\n        return Option.Some(fn(this.value as T));\n      case OptionType.None:\n        return this as any as Option<U>;\n    }\n  }\n\n  match<A>(match: OptionMatch<T, A>): A {\n    switch (this.type) {\n      case OptionType.Some:\n        return match.some(this.value as T);\n      case OptionType.None:\n        return match.none();\n    }\n  }\n\n  unwrap(): T {\n    if (this.type === OptionType.None) {\n      throw new Error('attempt to unwrap `None` variant of `Option`');\n    }\n\n    return this.value as T;\n  }\n\n  static from<T>(value: T | undefined): Option<T> {\n    if (value) {\n      return Option.Some(value);\n    } else {\n      return Option.None();\n    }\n  }\n}\n\nenum OptionType {\n  Some = 'Option.Some',\n  None = 'Option.None',\n}\n\ninterface OptionMatch<T, A> {\n  some: (value: T) => A;\n  none: () => A;\n}\n","export class Vec {\n  constructor(public x: number, public y: number) {}\n\n  length(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  scale(factor: number): Vec {\n    return new Vec(factor * this.x, factor * this.y);\n  }\n\n  plus(rhs: Vec): Vec {\n    return new Vec(this.x + rhs.x, this.y + rhs.y);\n  }\n\n  minus(rhs: Vec): Vec {\n    return new Vec(this.x - rhs.x, this.y - rhs.y);\n  }\n\n  proj(target: Vec): Vec {\n    const denom = target.dot(target);\n    if (denom === 0) {\n      throw new Error('attempt to project onto the zero vector');\n    }\n\n    const num = this.dot(target);\n    return target.scale(num / denom);\n  }\n\n  dot(rhs: Vec): number {\n    return this.x * rhs.x + this.y * rhs.y;\n  }\n\n  // Right-handed\n  perp(): Vec {\n    const x = new Vec(1, 0).dot(this);\n    const y = new Vec(0, 1).dot(this);\n    return new Vec(-y, x);\n  }\n\n  crossSign(rhs: Vec): number {\n    const crossLength = this.x * rhs.y - this.y * rhs.x;\n    return Math.sign(crossLength);\n  }\n\n  normalize(): Vec {\n    const len = this.length();\n    if (len === 0) {\n      throw new Error('attempt to normalize zero vector');\n    }\n\n    return this.scale(1 / len);\n  }\n\n  rotate(angle: number): Vec {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const x = this.x * cos + this.y * sin;\n    const y = -this.x * sin + this.y * cos;\n    return new Vec(x, y);\n  }\n}\n","export class Result<A, E> {\n  private type: ResultType;\n  private ok?: A;\n  private err?: E;\n\n  static Ok<A, E>(ok: A): Result<A, E> {\n    const out = new Result<A, E>();\n    out.type = ResultType.Ok;\n    out.ok = ok;\n    return out;\n  }\n\n  static Err<A, E>(err: E): Result<A, E> {\n    const out = new Result<A, E>();\n    out.type = ResultType.Err;\n    out.err = err;\n    return out;\n  }\n\n  match<T>(match: ResultMatch<E, A, T>): T {\n    switch (this.type) {\n      case ResultType.Ok:\n        return match.ok(this.ok as A);\n      case ResultType.Err:\n        return match.err(this.err as E);\n    }\n  }\n}\n\nenum ResultType {\n  Ok = 'Ok',\n  Err = 'Err',\n}\n\ninterface ResultMatch<E, A, T> {\n  ok: (ok: A) => T;\n  err: (err: E) => T;\n}\n","import { Vec } from './Vec';\n\nexport class Rect {\n  private minCorner: Vec;\n  private maxCorner: Vec;\n\n  constructor(corner1: Vec, corner2: Vec) {\n    const minX = Math.min(corner1.x, corner2.x);\n    const minY = Math.min(corner1.y, corner2.y);\n    const maxX = Math.max(corner1.x, corner2.x);\n    const maxY = Math.max(corner1.y, corner2.y);\n\n    this.minCorner = new Vec(minX, minY);\n    this.maxCorner = new Vec(maxX, maxY);\n  }\n\n  get x(): number {\n    return this.minCorner.x;\n  }\n\n  get y(): number {\n    return this.minCorner.y;\n  }\n\n  get width(): number {\n    return this.maxCorner.x - this.minCorner.x;\n  }\n\n  get height(): number {\n    return this.maxCorner.y - this.minCorner.y;\n  }\n\n  contains(vec: Vec, padding: number = 0): boolean {\n    const minDiff = vec.minus(this.minCorner);\n    const maxDiff = this.maxCorner.minus(vec);\n\n    return (\n      minDiff.x > padding &&\n      minDiff.y > padding &&\n      maxDiff.x > padding &&\n      maxDiff.y > padding\n    );\n  }\n}\n","export * from './Vec';\nexport * from './Option';\nexport * from './Result';\nexport * from './Rect';\n\nexport function noOp(..._args: any[]) {}\n\nexport function arrayToObj<A extends IdAble>(xs: A[]): { [key: string]: A } {\n  return xs.reduce((acc, x) => ({ ...acc, [x.id]: x }), {});\n}\n\nexport interface IdAble {\n  id: number;\n}\n\nexport function xOrIn<A>(xs: A[], x: A): A[] {\n  if (xs.includes(x)) {\n    return xs.filter(x1 => x1 !== x);\n  } else {\n    return [...xs, x];\n  }\n}\n\nexport function classNames(...args: any[]): string {\n  return args\n    .map(arg => {\n      if (arg && typeof arg === 'object') {\n        return Object.keys(arg)\n          .filter(key => arg[key])\n          .map(key => String(key))\n          .join(' ');\n      } else {\n        return String(arg);\n      }\n    })\n    .join(' ');\n}\n\nexport function dups<A>(xs: A[]): A[] {\n  const seen: A[] = [];\n  const dups: A[] = [];\n\n  for (let x of xs) {\n    if (seen.includes(x) && !dups.includes(x)) {\n      dups.push(x);\n    }\n\n    seen.push(x);\n  }\n\n  return dups;\n}\n","export class Selection {\n  private type: SelectionType;\n  private vertexIds?: number[];\n\n  static None(): Selection {\n    const out = new Selection();\n    out.type = SelectionType.None;\n    return out;\n  }\n\n  static Vertices(vertexIds: number[]): Selection {\n    const out = new Selection();\n    out.type = SelectionType.Vertices;\n    out.vertexIds = vertexIds;\n    return out;\n  }\n\n  match<A>(match: SelectionMatch<A>): A {\n    switch (this.type) {\n      case SelectionType.None:\n        return match.none();\n      case SelectionType.Vertices:\n        return match.vertices(this.vertexIds as number[]);\n    }\n  }\n}\n\nenum SelectionType {\n  None = 'None',\n  Vertices = 'Vertices',\n}\n\ninterface SelectionMatch<A> {\n  none: () => A;\n  vertices: (vertexIds: number[]) => A;\n}\n","import { Vec } from '../../tools';\n\nexport class DragSubject {\n  private type: DragSubjectType;\n  private boxSelectionRootPos?: Vec;\n  private vertexOffsets?: VertexOffsets;\n  private edgeOffsets?: EdgeOffsets;\n  private edgeId?: number;\n\n  static None(): DragSubject {\n    const out = new DragSubject();\n    out.type = DragSubjectType.None;\n    return out;\n  }\n\n  static BoxSelection(rootPos: Vec): DragSubject {\n    const out = new DragSubject();\n    out.type = DragSubjectType.BoxSelection;\n    out.boxSelectionRootPos = rootPos;\n    return out;\n  }\n\n  static Vertices(\n    vertexOffsets: VertexOffsets,\n    edgeOffsets: EdgeOffsets\n  ): DragSubject {\n    const out = new DragSubject();\n    out.type = DragSubjectType.Vertices;\n    out.vertexOffsets = vertexOffsets;\n    out.edgeOffsets = edgeOffsets;\n    return out;\n  }\n\n  static EdgeControlPt(edgeId: number): DragSubject {\n    const out = new DragSubject();\n    out.type = DragSubjectType.EdgeControlPt;\n    out.edgeId = edgeId;\n    return out;\n  }\n\n  static NewVertex(): DragSubject {\n    const out = new DragSubject();\n    out.type = DragSubjectType.NewVertex;\n    return out;\n  }\n\n  isNone(): boolean {\n    return this.type === DragSubjectType.None;\n  }\n\n  isBoxSelection(): boolean {\n    return this.type === DragSubjectType.BoxSelection;\n  }\n\n  isNewVertex(): boolean {\n    return this.type === DragSubjectType.NewVertex;\n  }\n\n  match<A>(match: DragSubjectMatch<A>): A {\n    switch (this.type) {\n      case DragSubjectType.None:\n        return match.none();\n      case DragSubjectType.BoxSelection:\n        return match.boxSelection(this.boxSelectionRootPos as Vec);\n      case DragSubjectType.Vertices:\n        return match.vertices(\n          this.vertexOffsets as VertexOffsets,\n          this.edgeOffsets as EdgeOffsets\n        );\n      case DragSubjectType.EdgeControlPt:\n        return match.edgeControlPt(this.edgeId as number);\n      case DragSubjectType.NewVertex:\n        return match.newVertex();\n    }\n  }\n}\n\nenum DragSubjectType {\n  None = 'None',\n  BoxSelection = 'BoxSelection',\n  Vertices = 'Vertices',\n  EdgeControlPt = 'EdgeControlPt',\n  NewVertex = 'NewVertex',\n}\n\nexport interface VertexOffsets {\n  [id: number]: {\n    id: number;\n    mouseOffset: Vec;\n  };\n}\n\nexport interface VertexOffset {\n  id: number;\n  mouseOffset: Vec;\n}\n\nexport interface EdgeOffsets {\n  [id: number]: {\n    id: number;\n    pqRatio: number;\n    perpLen: number;\n  };\n}\n\nexport interface EdgeOffset {\n  id: number;\n  pqRatio: number;\n  perpLen: number;\n}\n\ninterface DragSubjectMatch<A> {\n  none: () => A;\n  boxSelection: (rootPos: Vec) => A;\n  vertices: (vertexOffsets: VertexOffsets, edgeOffsets: EdgeOffsets) => A;\n  edgeControlPt: (edgeId: number) => A;\n  newVertex: () => A;\n}\n","import { Option } from '../../tools';\n\nexport class UndoRedo<St> {\n  static readonly MAX_UNDOS = 16;\n  private undoStack: St[];\n  private redoStack: St[];\n\n  constructor(private emptyState: St) {\n    this.undoStack = [emptyState];\n    this.redoStack = [];\n  }\n\n  commit(state: St): UndoRedo<St> {\n    const clone = new UndoRedo<St>(this.emptyState);\n    clone.undoStack = [\n      state,\n      ...this.undoStack.slice(0, UndoRedo.MAX_UNDOS - 1),\n    ];\n    clone.redoStack = [];\n    return clone;\n  }\n\n  undo(): Option<[St, UndoRedo<St>]> {\n    if (this.undoStack.length < 2) {\n      return Option.None();\n    }\n\n    const clone = new UndoRedo<St>(this.emptyState);\n    const [currentState, previousState, ...undoStack] = this.undoStack;\n    clone.undoStack = [previousState, ...undoStack];\n    clone.redoStack = [currentState, ...this.redoStack];\n    return Option.Some([previousState, clone]);\n  }\n\n  redo(): Option<[St, UndoRedo<St>]> {\n    if (this.redoStack.length < 1) {\n      return Option.None();\n    }\n\n    const clone = new UndoRedo<St>(this.emptyState);\n    const [mostRecentState, ...redoStack] = this.redoStack;\n    clone.redoStack = redoStack;\n    clone.undoStack = [mostRecentState, ...this.undoStack];\n    return Option.Some([mostRecentState, clone]);\n  }\n}\n","export class OverlayState {\n  private type: OverlayStateType;\n  private graph?: string;\n  private errors?: string[];\n\n  static None(): OverlayState {\n    const out = new OverlayState();\n    out.type = OverlayStateType.None;\n    return out;\n  }\n\n  static Graph(graph: string): OverlayState {\n    const out = new OverlayState();\n    out.type = OverlayStateType.Graph;\n    out.graph = graph;\n    return out;\n  }\n\n  static Errors(errors: string[]): OverlayState {\n    const out = new OverlayState();\n    out.type = OverlayStateType.Errors;\n    out.errors = errors;\n    return out;\n  }\n\n  isNone(): boolean {\n    return this.type === OverlayStateType.None;\n  }\n\n  match<A>(match: OverlayStateMatch<A>): A {\n    switch (this.type) {\n      case OverlayStateType.None:\n        return match.none();\n      case OverlayStateType.Graph:\n        return match.graph(this.graph as string);\n      case OverlayStateType.Errors:\n        return match.errors(this.errors as string[]);\n    }\n  }\n}\n\nenum OverlayStateType {\n  None = 'None',\n  Graph = 'Graph',\n  Errors = 'Errors',\n}\n\ninterface OverlayStateMatch<A> {\n  none: () => A;\n  graph: (graph: string) => A;\n  errors: (errors: string[]) => A;\n}\n","import React from 'react';\nimport { Action } from './actions';\nimport { Vec, Option } from '../tools';\nimport { DragSubject, Selection, UndoRedo, OverlayState } from './misc';\n\nexport const StateContext = React.createContext({\n  state: null as any as State,\n  dispatch: null as any as React.Dispatch<Action>,\n});\n\nexport interface State {\n  ui: UIState;\n  graph: GraphState;\n  overlay: OverlayState;\n  undoRedo: UndoRedo<GraphState>;\n}\n\nexport interface UIState {\n  mousePos: Vec;\n  selection: Selection;\n  dragSubject: DragSubject;\n  isMultiSelect: boolean;\n  hasMoved: boolean;\n}\n\nexport interface GraphState {\n  vertices: {\n    byId: ById<Vertex>;\n    wip: Option<ById<Vertex>>;\n    hovered: Option<VertexId>;\n  };\n  edges: {\n    byId: ById<Edge>;\n    wip: Option<ById<Edge>>;\n    hovered: Option<EdgeId>;\n  };\n}\n\nexport interface ById<A> {\n  [id: number]: A;\n}\n\nexport interface Vertex {\n  id: VertexId;\n  name: string;\n  pos: Vec;\n}\n\nexport interface Edge {\n  id: EdgeId;\n  startVertexId: VertexId;\n  endVertexId: VertexId;\n  controlPtPos: Vec;\n  direction: EdgeDirection;\n}\n\nexport enum EdgeDirection {\n  None = 'None',\n  Forward = 'Forward',\n  Reverse = 'Reverse',\n}\n\nconst initGraph: GraphState = {\n  vertices: {\n    byId: {\n      1: {\n        id: 1,\n        name: 'a',\n        pos: new Vec(-298.33331298828125, -125.08334350585938),\n      },\n      2: {\n        id: 2,\n        name: 'b',\n        pos: new Vec(51.66668701171875, -211.08334350585938),\n      },\n      3: {\n        id: 3,\n        name: 'c',\n        pos: new Vec(209.66668701171875, 66.91665649414062),\n      },\n      4: {\n        id: 4,\n        name: 'd',\n        pos: new Vec(-147.33331298828125, 160.91665649414062),\n      },\n    },\n    wip: Option.None(),\n    hovered: Option.None(),\n  },\n  edges: {\n    byId: {\n      1: {\n        id: 1,\n        startVertexId: 1,\n        endVertexId: 4,\n        controlPtPos: new Vec(-299.33331298828125, 43.91665649414061),\n        direction: EdgeDirection.Reverse,\n      },\n      2: {\n        id: 2,\n        startVertexId: 1,\n        endVertexId: 2,\n        controlPtPos: new Vec(-159.5464273137012, -233.6503719672334),\n        direction: EdgeDirection.Forward,\n      },\n      3: {\n        id: 3,\n        startVertexId: 2,\n        endVertexId: 3,\n        controlPtPos: new Vec(204.41999697432448, -86.65044718436185),\n        direction: EdgeDirection.Forward,\n      },\n      4: {\n        id: 4,\n        startVertexId: 3,\n        endVertexId: 4,\n        controlPtPos: new Vec(63.526792958632, 177.73087032210645),\n        direction: EdgeDirection.Forward,\n      },\n      5: {\n        id: 5,\n        startVertexId: 2,\n        endVertexId: 4,\n        controlPtPos: new Vec(-47.83331298828125, -25.083343505859375),\n        direction: EdgeDirection.None,\n      },\n    },\n    wip: Option.None(),\n    hovered: Option.None(),\n  },\n};\n\nexport const initState: State = {\n  ui: {\n    mousePos: new Vec(0, 0),\n    selection: Selection.None(),\n    dragSubject: DragSubject.None(),\n    isMultiSelect: false,\n    hasMoved: false,\n  },\n  graph: initGraph,\n  overlay: OverlayState.None(),\n  undoRedo: new UndoRedo(initGraph),\n};\n\nexport type VertexId = number;\nexport type EdgeId = number;\n","import { Vec } from '../tools';\nimport { KeyDownInfo } from '../hooks';\nimport { VertexId, EdgeId } from './state';\n\nexport interface Action {\n  type: string;\n  payload?: any;\n}\n\nexport enum ActionType {\n  MouseDownCanvas = 'MouseDownCanvas',\n  MouseDownVertex = 'MouseDownVertex',\n  MouseDownEdgeControlPt = 'MouseDownEdgeControlPt',\n  MouseDownNewVertex = 'MouseDownNewVertex',\n  MouseMove = 'MouseMove',\n  MouseUp = 'MouseUp',\n  KeyDown = 'KeyDown',\n  KeyUp = 'KeyUp',\n  AddVertex = 'AddVertex',\n  RemoveVertices = 'RemoveVertices',\n  AddEdge = 'AddEdge',\n  RemoveEdge = 'RemoveEdge',\n  ShiftKeyDown = 'ShiftKeyDown',\n  CancelCurrentAction = 'CancelCurrentAction',\n  SelectAllVertices = 'SelectAllVertices',\n  ChangeVertexName = 'ChangeVertexName',\n  MouseEnterVertex = 'MouseEnterVertex',\n  MouseLeaveVertex = 'MouseLeaveVertex',\n  MouseEnterEdgeControlPt = 'MouseEnterEdgeControlPt',\n  MouseLeaveEdgeControlPt = 'MouseLeaveEdgeControlPt',\n  ToggleEdgeDirection = 'ToggleEdgeDirection',\n  CommitCurrentGraphState = 'CommitCurrentGraphState',\n  Undo = 'Undo',\n  Redo = 'Redo',\n  OpenGraphOverlay = 'OpenGraphOverlay',\n  OpenErrorsOverlay = 'OpenErrorsOverlay',\n  DismissOverlay = 'DismissOverlay',\n}\n\nexport function mouseDownCanvas(): Action {\n  return { type: ActionType.MouseDownCanvas };\n}\n\nexport function mouseDownVertex(vertexId: VertexId): Action {\n  return { type: ActionType.MouseDownVertex, payload: vertexId };\n}\n\nexport function mouseDownEdgeControlPt(edgeId: EdgeId): Action {\n  return { type: ActionType.MouseDownEdgeControlPt, payload: edgeId };\n}\n\nexport function mouseDownNewVertex(): Action {\n  return { type: ActionType.MouseDownNewVertex };\n}\n\nexport function mouseMove(pos: Vec): Action {\n  return { type: ActionType.MouseMove, payload: pos };\n}\n\nexport function mouseUp(): Action {\n  return { type: ActionType.MouseUp };\n}\n\nexport function keyDown(info: KeyDownInfo): Action {\n  return { type: ActionType.KeyDown, payload: info };\n}\n\nexport function keyUp(): Action {\n  return { type: ActionType.KeyUp };\n}\n\nexport function shiftKeyDown(): Action {\n  return { type: ActionType.ShiftKeyDown };\n}\n\nexport function addVertex(): Action {\n  return { type: ActionType.AddVertex };\n}\n\nexport function removeVertices(vertexIds: VertexId[]): Action {\n  return { type: ActionType.RemoveVertices, payload: vertexIds };\n}\n\nexport function addEdge(\n  startVertexId: VertexId,\n  endVertexId: VertexId\n): Action {\n  return { type: ActionType.AddEdge, payload: { startVertexId, endVertexId } };\n}\n\nexport function removeEdge(edgeId: EdgeId): Action {\n  return { type: ActionType.RemoveEdge, payload: edgeId };\n}\n\nexport function cancelCurrentAction(): Action {\n  return { type: ActionType.CancelCurrentAction };\n}\n\nexport function selectAllVertices(): Action {\n  return { type: ActionType.SelectAllVertices };\n}\n\nexport function changeVertexName(vertexId: VertexId, name: string): Action {\n  return { type: ActionType.ChangeVertexName, payload: { vertexId, name } };\n}\n\nexport function mouseEnterVertex(vertexId: VertexId): Action {\n  return { type: ActionType.MouseEnterVertex, payload: vertexId };\n}\n\nexport function mouseLeaveVertex(): Action {\n  return { type: ActionType.MouseLeaveVertex };\n}\n\nexport function mouseEnterEdgeControlPt(edgeId: EdgeId): Action {\n  return { type: ActionType.MouseEnterEdgeControlPt, payload: edgeId };\n}\n\nexport function mouseLeaveEdgeControlPt(): Action {\n  return { type: ActionType.MouseLeaveEdgeControlPt };\n}\n\nexport function toggleEdgeDirection(edgeId: EdgeId): Action {\n  return { type: ActionType.ToggleEdgeDirection, payload: edgeId };\n}\n\nexport function commitCurrentGraphState(): Action {\n  return { type: ActionType.CommitCurrentGraphState };\n}\n\nexport function undo(): Action {\n  return { type: ActionType.Undo };\n}\n\nexport function redo(): Action {\n  return { type: ActionType.Redo };\n}\n\nexport function openGraphOverlay(graph: string): Action {\n  return { type: ActionType.OpenGraphOverlay, payload: graph };\n}\n\nexport function openErrorsOverlay(errors: string[]): Action {\n  return { type: ActionType.OpenErrorsOverlay, payload: errors };\n}\n\nexport function dismissOverlay(): Action {\n  return { type: ActionType.DismissOverlay };\n}\n","import React from 'react';\nimport { Vec, classNames } from './tools';\nimport { StateContext } from './state';\nimport * as St from './state';\n\nexport const VERTEX_RADIUS = 15;\n\nexport interface VertexProps {\n  id: number;\n  name: string;\n  pos: Vec;\n}\n\nconst Vertex: React.FC<VertexProps> = props => {\n  const { state, dispatch } = React.useContext(StateContext);\n  const { id, name, pos } = props;\n\n  const isSelected = St.isVertexSelected(state, id);\n  const isInBoxSelection = St.isVertexInBoxSelection(state, id);\n  const isHovered = St.isVertexHovered(state, id);\n  const hasDuplicatedName = St.hasDuplicatedName(state, id);\n  const isMissingName = name.length === 0;\n\n  function handleMouseDown() {\n    return dispatch(St.mouseDownVertex(id));\n  }\n\n  function handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n    return dispatch(St.changeVertexName(id, e.target.value));\n  }\n\n  function handleMouseEnter() {\n    return dispatch(St.mouseEnterVertex(id));\n  }\n\n  function handleMouseLeave() {\n    return dispatch(St.mouseLeaveVertex());\n  }\n\n  const scale = isHovered ? 1.5 : 1;\n  const radius = scale * VERTEX_RADIUS;\n\n  return (\n    <g>\n      <foreignObject\n        x={pos.x - VERTEX_RADIUS}\n        y={pos.y + radius}\n        width=\"2em\"\n        height=\"2em\"\n      >\n        <input\n          className={classNames('vertex-name-input', {\n            duplicate: hasDuplicatedName,\n            missing: isMissingName,\n          })}\n          type=\"text\"\n          maxLength={2}\n          value={name}\n          // This placeholder only appears if the name is missing\n          placeholder=\"!\"\n          onChange={handleNameChange}\n        />\n      </foreignObject>\n\n      <g\n        className={classNames('vertex', {\n          hovered: isInBoxSelection,\n          selected: isSelected,\n        })}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onMouseDown={handleMouseDown}\n      >\n        <circle\n          cx={pos.x}\n          cy={pos.y}\n          r={1.5 * VERTEX_RADIUS}\n          fill=\"transparent\"\n        />\n        <circle\n          className=\"vertex-dot\"\n          cx={pos.x}\n          cy={pos.y}\n          r={radius}\n          strokeWidth=\"2\"\n        />\n      </g>\n    </g>\n  );\n};\n\nexport default Vertex;\n","import { State, Vertex, Edge } from './index';\nimport { DragSubject, Selection, OverlayState } from './misc';\nimport { Vec, Option, Result, Rect, dups } from '../tools';\nimport {\n  Action,\n  addVertex,\n  removeVertices,\n  addEdge,\n  removeEdge,\n} from './actions';\nimport { VertexId, EdgeId, EdgeDirection } from './state';\nimport { VERTEX_RADIUS } from '../Vertex';\n\nexport function vertexPos(state: State, vertexId: VertexId): Vec {\n  return state.graph.vertices.wip.match({\n    none: () => state.graph.vertices.byId[vertexId].pos,\n    some: byId => byId[vertexId].pos,\n  });\n}\n\nexport function selectedVertexIds(state: State): VertexId[] {\n  return state.ui.selection.match({\n    none: () => [],\n    vertices: vertexIds => vertexIds,\n  });\n}\n\nexport function mousePos(state: State): Vec {\n  return state.ui.mousePos;\n}\n\nexport function allVertices(state: State): Vertex[] {\n  return Object.values(\n    state.graph.vertices.wip.match({\n      none: () => state.graph.vertices.byId,\n      some: byId => byId,\n    })\n  );\n}\n\nexport function allEdges(state: State): Edge[] {\n  return Object.values(\n    state.graph.edges.wip.match({\n      none: () => state.graph.edges.byId,\n      some: byId => byId,\n    })\n  );\n}\n\nexport function isMultiSelect(state: State): boolean {\n  return state.ui.isMultiSelect;\n}\n\nexport function nextVertexId(state: State): VertexId {\n  const idsInUse = allVertices(state).map(({ id }) => id);\n  return Math.max(0, ...idsInUse) + 1;\n}\n\nexport function nextEdgeId(state: State): EdgeId {\n  const idsInUse = allEdges(state).map(({ id }) => id);\n  return Math.max(0, ...idsInUse) + 1;\n}\n\nexport function newVertexPos(state: State): Option<Vec> {\n  return state.ui.dragSubject.isNewVertex()\n    ? Option.Some(state.ui.mousePos)\n    : Option.None();\n}\n\nexport function dragSubject(state: State): DragSubject {\n  return state.ui.dragSubject;\n}\n\nexport function isVertexSelected(state: State, vertexId: number): boolean {\n  return state.ui.selection.match({\n    none: () => false,\n    vertices: vertexIds => vertexIds.includes(vertexId),\n  });\n}\n\nexport function isVertexInBoxSelection(\n  state: State,\n  vertexId: number\n): boolean {\n  return state.ui.dragSubject.match({\n    boxSelection: rootPos => {\n      const rect = new Rect(rootPos, mousePos(state));\n      const vertex = state.graph.vertices.byId[vertexId];\n      return rect.contains(vertex.pos, VERTEX_RADIUS);\n    },\n    none: () => false,\n    vertices: () => false,\n    edgeControlPt: () => false,\n    newVertex: () => false,\n  });\n}\n\nexport function selection(state: State): Selection {\n  return state.ui.selection;\n}\n\nexport function availableActions(state: State): AppAction[] {\n  const addVertexAction = {\n    name: 'Add Vertex [a]',\n    clickAction: addVertex(),\n  };\n\n  return selection(state).match({\n    none: () => [addVertexAction],\n    vertices: vertexIds => {\n      switch (vertexIds.length) {\n        case 1:\n          return [\n            addVertexAction,\n            {\n              name: 'Remove Vertex [d]',\n              clickAction: removeVertices(vertexIds),\n            },\n          ];\n        case 2: {\n          const common = [\n            addVertexAction,\n            {\n              name: 'Remove Vertices [d]',\n              clickAction: removeVertices(vertexIds),\n            },\n          ];\n          const [vertexId1, vertexId2] = vertexIds;\n          const edge = edgeFromEndpoints(state, vertexId1, vertexId2);\n          return edge.match({\n            some: edge => [\n              ...common,\n              {\n                name: 'Remove Edge [e]',\n                clickAction: removeEdge(edge.id),\n              },\n            ],\n            none: () => [\n              ...common,\n              {\n                name: 'Add Edge [e]',\n                clickAction: addEdge(vertexId1, vertexId2),\n              },\n            ],\n          });\n        }\n        default:\n          return [\n            addVertexAction,\n            {\n              name: 'Remove Vertices [d]',\n              clickAction: removeVertices(vertexIds),\n            },\n          ];\n      }\n    },\n  });\n}\n\nexport interface AppAction {\n  name: string;\n  clickAction: Action;\n}\n\nexport function edgeFromEndpoints(\n  state: State,\n  vertexId1: number,\n  vertexId2: number\n): Option<Edge> {\n  const vertices = [vertexId1, vertexId2];\n  const edges = allEdges(state);\n  return Option.from(\n    edges.find(\n      e =>\n        vertices.includes(e.startVertexId) && vertices.includes(e.endVertexId)\n    )\n  );\n}\n\nexport function vertexIdsInRect(state: State, rect: Rect): VertexId[] {\n  const vertices = allVertices(state);\n  return vertices\n    .filter(vertex => rect.contains(vertex.pos, VERTEX_RADIUS))\n    .map(({ id }) => id);\n}\n\nconst ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(\n  ''\n);\n\nexport function nextVertexName(state: State): string {\n  const namesInUse = allVertices(state).map(({ name }) => name);\n  const unusedSingles = ALPHABET.filter(c => !namesInUse.includes(c));\n  if (unusedSingles.length > 0) {\n    return unusedSingles[0];\n  } else {\n    // In practice, this should never happen, so it's alright if it's a little slow\n    for (let suffix = 0; suffix <= 9; suffix++) {\n      const alpha = ALPHABET.map(c => `${c}${suffix}`);\n      const unused = alpha.filter(n => !namesInUse.includes(n));\n      if (unused.length > 0) {\n        return unused[0];\n      }\n    }\n\n    return '';\n  }\n}\n\nexport function hasDuplicatedName(state: State, vertexId: VertexId): boolean {\n  const vertexName = state.graph.vertices.byId[vertexId].name;\n  return Boolean(\n    allVertices(state).find(\n      ({ id, name }) => id !== vertexId && name === vertexName\n    )\n  );\n}\n\nexport function isVertexHovered(state: State, vertexId: VertexId): boolean {\n  return state.graph.vertices.hovered.match({\n    none: () => false,\n    some: vertexId1 => vertexId1 === vertexId,\n  });\n}\n\nexport function isEdgeControlPtHovered(state: State, edgeId: EdgeId): boolean {\n  return state.graph.edges.hovered.match({\n    none: () => false,\n    some: edgeId1 => edgeId1 === edgeId,\n  });\n}\n\nexport function hasMoved(state: State): boolean {\n  return state.ui.hasMoved;\n}\n\nexport function vertexById(state: State, vertexId: VertexId): Vertex {\n  return state.graph.vertices.wip.match({\n    none: () => state.graph.vertices.byId[vertexId],\n    some: byId => byId[vertexId],\n  });\n}\n\nexport function edgeById(state: State, edgeId: EdgeId): Edge {\n  return state.graph.edges.wip.match({\n    none: () => state.graph.edges.byId[edgeId],\n    some: byId => byId[edgeId],\n  });\n}\n\nexport function exportMathematica(state: State): Result<string, string[]> {\n  const duplicates = duplicateVertexNames(state);\n  const missing = missingVertexNameCount(state);\n\n  const errors = [];\n  if (duplicates.length > 0) {\n    if (duplicates.length === 1) {\n      errors.push(`The name \"${duplicates[0]}\" is used more than once`);\n    } else {\n      const duplicateNames = duplicates.map(name => `\"${name}\"`).join(', ');\n      errors.push(`The names ${duplicateNames} are used more than once`);\n    }\n  }\n  if (missing > 0) {\n    if (missing === 1) {\n      errors.push(`1 vertex is missing a name`);\n    } else {\n      errors.push(`${missing} vertices are missing names`);\n    }\n  }\n  if (errors.length > 0) {\n    return Result.Err(errors);\n  }\n\n  const edges = allEdges(state);\n  const formatted = edges.map(e => {\n    const start = vertexById(state, e.startVertexId);\n    const end = vertexById(state, e.endVertexId);\n    switch (e.direction) {\n      case EdgeDirection.None:\n        return `${start.name} <-> ${end.name}`;\n      case EdgeDirection.Forward:\n        return `${start.name} -> ${end.name}`;\n      case EdgeDirection.Reverse:\n        return `${end.name} -> ${start.name}`;\n    }\n    // Linter appeasement\n    return '';\n  });\n\n  return Result.Ok(\n    `Graph[{ ${formatted.join(', ')} }, VertexLabels -> \"Name\"]`\n  );\n}\n\nfunction duplicateVertexNames(state: State): string[] {\n  const vertexNames = allVertices(state).map(({ name }) => name);\n  // We'll account for missing names separately\n  return dups(vertexNames).filter(name => name.length > 0);\n}\n\nfunction missingVertexNameCount(state: State): number {\n  const vertexNames = allVertices(state).map(({ name }) => name);\n  return vertexNames.filter(name => name.length === 0).length;\n}\n\nexport function overlay(state: State): OverlayState {\n  return state.overlay;\n}\n","import React from 'react';\nimport { State } from './index';\nimport { Action, ActionType } from './actions';\nimport * as Act from './actions';\nimport * as Sel from './selectors';\n\nexport interface Middleware<St, A> {\n  (state: St, next: React.Dispatch<A>): React.Dispatch<A>;\n}\n\nexport function logActions(...exclude: string[]): Middleware<State, Action> {\n  return (state: State, dispatch: React.Dispatch<Action>) => {\n    return (action: Action) => {\n      if (!exclude.includes(action.type)) {\n        console.log(JSON.stringify(action, null, 2));\n      }\n\n      return dispatch(action);\n    };\n  };\n}\n\nexport function dispatchKeyEvents(): Middleware<State, Action> {\n  return (state: State, dispatch: React.Dispatch<Action>) => {\n    return (action: Action) => {\n      if (action.type === ActionType.KeyDown) {\n        switch (action.payload.key) {\n          case 'Shift':\n            return dispatch(Act.shiftKeyDown());\n          case 'a':\n            if (action.payload.ctrlKey || action.payload.metaKey) {\n              return dispatch(Act.selectAllVertices());\n            } else {\n              return dispatch(Act.addVertex());\n            }\n          case 'Delete':\n          case 'Backspace':\n          case 'd':\n            return Sel.selection(state).match({\n              none: () => dispatch(action),\n              vertices: vertexIds => dispatch(Act.removeVertices(vertexIds)),\n            });\n          case 'e':\n            return Sel.selection(state).match({\n              none: () => dispatch(action),\n              vertices: vertexIds => {\n                if (vertexIds.length === 2) {\n                  const [startVertexId, endVertexId] = vertexIds;\n                  return Sel.edgeFromEndpoints(\n                    state,\n                    startVertexId,\n                    endVertexId\n                  ).match({\n                    none: () =>\n                      dispatch(Act.addEdge(startVertexId, endVertexId)),\n                    some: edge => dispatch(Act.removeEdge(edge.id)),\n                  });\n                } else {\n                  return dispatch(action);\n                }\n              },\n            });\n          case 'Escape':\n            return dispatch(Act.cancelCurrentAction());\n          case 'z':\n            if (action.payload.ctrlKey || action.payload.metaKey) {\n              return dispatch(Act.undo());\n            } else {\n              return dispatch(action);\n            }\n          case 'y':\n          case 'Z':\n            if (action.payload.ctrlKey || action.payload.metaKey) {\n              return dispatch(Act.redo());\n            } else {\n              return dispatch(action);\n            }\n          default:\n            return dispatch(action);\n        }\n      } else {\n        return dispatch(action);\n      }\n    };\n  };\n}\n\nexport function commitGraph(): Middleware<State, Action> {\n  return (state: State, dispatch: React.Dispatch<Action>) => {\n    return (action: Action) => {\n      switch (action.type) {\n        case ActionType.MouseDownNewVertex:\n        case ActionType.AddEdge:\n        case ActionType.RemoveVertices:\n        case ActionType.RemoveEdge:\n        case ActionType.ToggleEdgeDirection:\n          dispatch(action);\n          return dispatch(Act.commitCurrentGraphState());\n        case ActionType.MouseUp:\n          if (Sel.hasMoved(state)) {\n            dispatch(action);\n            return dispatch(Act.commitCurrentGraphState());\n          } else {\n            return dispatch(action);\n          }\n        default:\n          return dispatch(action);\n      }\n    };\n  };\n}\n","import { Vec, Rect, Option, xOrIn, arrayToObj } from '../tools';\nimport { Action, ActionType } from './actions';\nimport {\n  State,\n  GraphState,\n  ById,\n  Edge,\n  Vertex,\n  EdgeId,\n  VertexId,\n  EdgeDirection,\n} from './state';\nimport {\n  Selection,\n  DragSubject,\n  VertexOffsets,\n  VertexOffset,\n  EdgeOffsets,\n  EdgeOffset,\n  OverlayState,\n} from './misc';\nimport * as Sel from './selectors';\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case ActionType.MouseDownCanvas:\n      return reduceMouseDownCanvas(state);\n    case ActionType.MouseDownVertex:\n      return reduceMouseDownVertex(state, action);\n    case ActionType.MouseDownEdgeControlPt:\n      return reduceMouseDownEdgeControlPt(state, action);\n    case ActionType.MouseDownNewVertex:\n      return reduceMouseDownNewVertex(state);\n    case ActionType.MouseUp:\n      return reduceMouseUp(state);\n    case ActionType.MouseMove:\n      return reduceMouseMove(state, action);\n    case ActionType.AddVertex:\n      return reduceAddVertex(state);\n    case ActionType.RemoveVertices:\n      return reduceRemoveVertices(state, action);\n    case ActionType.AddEdge:\n      return reduceAddEdge(state, action);\n    case ActionType.RemoveEdge:\n      return reduceRemoveEdge(state, action);\n    case ActionType.ShiftKeyDown:\n      return reduceShiftKeyDown(state);\n    case ActionType.KeyUp:\n      return reduceKeyUp(state);\n    case ActionType.CancelCurrentAction:\n      return reduceCancelCurrentAction(state);\n    case ActionType.SelectAllVertices:\n      return reduceSelectAllVertices(state);\n    case ActionType.ChangeVertexName:\n      return reduceChangeVertexName(state, action);\n    case ActionType.MouseEnterVertex:\n      return reduceMouseEnterVertex(state, action);\n    case ActionType.MouseLeaveVertex:\n      return reduceMouseLeaveVertex(state);\n    case ActionType.MouseEnterEdgeControlPt:\n      return reduceMouseEnterEdgeControlPt(state, action);\n    case ActionType.MouseLeaveEdgeControlPt:\n      return reduceMouseLeaveEdgeControlPt(state);\n    case ActionType.ToggleEdgeDirection:\n      return reduceToggleEdgeDirection(state, action);\n    case ActionType.CommitCurrentGraphState:\n      return reduceCommitCurrentGraphState(state);\n    case ActionType.Undo:\n      return reduceUndo(state);\n    case ActionType.Redo:\n      return reduceRedo(state);\n    case ActionType.OpenGraphOverlay:\n      return reduceOpenGraphOverlay(state, action);\n    case ActionType.OpenErrorsOverlay:\n      return reduceOpenErrorsOverlay(state, action);\n    case ActionType.DismissOverlay:\n      return reduceDismissOverlay(state);\n    default:\n      return state;\n  }\n}\n\nfunction reduceMouseDownCanvas(state: State): State {\n  const dragSubject = DragSubject.BoxSelection(Sel.mousePos(state));\n  const selection = Sel.isMultiSelect(state)\n    ? state.ui.selection\n    : Selection.None();\n  return {\n    ...state,\n    ui: { ...state.ui, dragSubject, selection },\n  };\n}\n\nfunction reduceMouseDownVertex(state: State, action: Action): State {\n  const vertexId = action.payload;\n  const currentlySelectedVertexIds = Sel.selectedVertexIds(state);\n  const allSelectedVertexIds = Sel.isMultiSelect(state)\n    ? xOrIn(currentlySelectedVertexIds, vertexId)\n    : currentlySelectedVertexIds.includes(vertexId)\n    ? currentlySelectedVertexIds\n    : [vertexId];\n\n  const vertexOffsets = computeVertexOffsets(state, allSelectedVertexIds);\n  const edgeOffsets = computeEdgeOffsets(state, allSelectedVertexIds);\n\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      selection: Selection.Vertices(allSelectedVertexIds),\n      dragSubject: DragSubject.Vertices(vertexOffsets, edgeOffsets),\n      hasMoved: false,\n    },\n    graph: {\n      ...state.graph,\n      vertices: {\n        ...state.graph.vertices,\n        wip: Option.Some(state.graph.vertices.byId),\n      },\n      edges: {\n        ...state.graph.edges,\n        wip: Option.Some(state.graph.edges.byId),\n      },\n    },\n  };\n}\n\nfunction computeVertexOffsets(\n  state: State,\n  vertexIds: VertexId[]\n): VertexOffsets {\n  const mousePos = Sel.mousePos(state);\n  const vertices = vertexIds.map(id => state.graph.vertices.byId[id]);\n  const offsets: VertexOffset[] = vertices.map(({ id, pos }) => ({\n    id,\n    mouseOffset: pos.minus(mousePos),\n  }));\n  return arrayToObj(offsets);\n}\n\nfunction computeEdgeOffsets(state: State, vertexIds: VertexId[]): EdgeOffsets {\n  const relevantEdges = Sel.allEdges(state).filter(\n    edge =>\n      vertexIds.includes(edge.startVertexId) ||\n      vertexIds.includes(edge.endVertexId)\n  );\n  const offsets = relevantEdges.map(edge => computeEdgeOffset(state, edge));\n  return arrayToObj(offsets);\n}\n\nfunction computeEdgeOffset(state: State, edge: Edge): EdgeOffset {\n  const p = Sel.vertexPos(state, edge.startVertexId);\n  const q = Sel.vertexPos(state, edge.endVertexId);\n  const pq = q.minus(p);\n  const pc = edge.controlPtPos.minus(p);\n  const proj = pc.proj(pq);\n  const perp = pc.minus(proj);\n  const perpSign = proj.crossSign(perp);\n  const pqRatioSign = Math.sign(proj.dot(pq));\n  const pqRatio = (pqRatioSign * proj.length()) / pq.length();\n\n  return {\n    id: edge.id,\n    pqRatio,\n    perpLen: perpSign * perp.length(),\n  };\n}\n\nfunction reduceMouseDownEdgeControlPt(state: State, action: Action): State {\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      dragSubject: DragSubject.EdgeControlPt(action.payload),\n      hasMoved: false,\n    },\n    graph: {\n      ...state.graph,\n      edges: {\n        ...state.graph.edges,\n        wip: Option.Some(state.graph.edges.byId),\n      },\n    },\n  };\n}\n\nfunction reduceMouseDownNewVertex(state: State): State {\n  const newVertex: Vertex = {\n    id: Sel.nextVertexId(state),\n    name: Sel.nextVertexName(state),\n    pos: Sel.mousePos(state),\n  };\n\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      dragSubject: DragSubject.None(),\n    },\n    graph: {\n      ...state.graph,\n      vertices: {\n        ...state.graph.vertices,\n        byId: {\n          ...state.graph.vertices.byId,\n          [newVertex.id]: newVertex,\n        },\n      },\n    },\n  };\n}\n\nfunction reduceMouseUp(state: State): State {\n  return state.ui.dragSubject.match({\n    none: () => state,\n    vertices: () => commitVerticesAndEdges(state),\n    boxSelection: rootPos => selectVerticesInBoxSelection(state, rootPos),\n    edgeControlPt: () => commitEdges(state),\n    newVertex: () => state,\n  });\n}\n\nfunction selectVerticesInBoxSelection(state: State, rootPos: Vec): State {\n  const rect = new Rect(rootPos, Sel.mousePos(state));\n  const containedVertexIds = Sel.vertexIdsInRect(state, rect);\n\n  const allSelectedVertexIds = Sel.isMultiSelect(state)\n    ? [...Sel.selectedVertexIds(state), ...containedVertexIds]\n    : containedVertexIds;\n\n  const selection =\n    allSelectedVertexIds.length === 0\n      ? Selection.None()\n      : Selection.Vertices(allSelectedVertexIds);\n\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      dragSubject: DragSubject.None(),\n      selection,\n    },\n  };\n}\n\nfunction commitVerticesAndEdges(state: State): State {\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      dragSubject: DragSubject.None(),\n    },\n    graph: {\n      ...state.graph,\n      vertices: {\n        ...state.graph.vertices,\n        byId: state.graph.vertices.wip.unwrap(),\n        wip: Option.None(),\n      },\n      edges: {\n        ...state.graph.edges,\n        byId: state.graph.edges.wip.unwrap(),\n        wip: Option.None(),\n      },\n    },\n  };\n}\n\nfunction commitEdges(state: State): State {\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      dragSubject: DragSubject.None(),\n    },\n    graph: {\n      ...state.graph,\n      edges: {\n        ...state.graph.edges,\n        byId: state.graph.edges.wip.unwrap(),\n        wip: Option.None(),\n      },\n    },\n  };\n}\n\nfunction reduceMouseMove(state: State, action: Action): State {\n  const mousePos = action.payload;\n  const withMousePos = { ...state, ui: { ...state.ui, mousePos } };\n\n  return state.ui.dragSubject.match({\n    vertices: (vertexOffsets, edgeOffsets) =>\n      updateEdgeAndVertexWips(withMousePos, vertexOffsets, edgeOffsets),\n    edgeControlPt: edgeId => updateEdgeWip(withMousePos, edgeId),\n    boxSelection: () => withMousePos,\n    newVertex: () => withMousePos,\n    none: () => withMousePos,\n  });\n}\n\nfunction updateEdgeAndVertexWips(\n  state: State,\n  vertexOffsets: VertexOffsets,\n  edgeOffsets: EdgeOffsets\n): State {\n  const mousePos = Sel.mousePos(state);\n  const updatedVertices = Object.values(vertexOffsets).map(\n    ({ id, mouseOffset }) => {\n      const vertex = state.graph.vertices.byId[id];\n      const pos = mousePos.plus(mouseOffset);\n      return {\n        ...vertex,\n        pos,\n      };\n    }\n  );\n  const vertexWip: Option<ById<Vertex>> = state.graph.vertices.wip.map(\n    byId => ({\n      ...byId,\n      ...arrayToObj(updatedVertices),\n    })\n  );\n\n  const updatedEdges = Object.values(edgeOffsets).map(\n    ({ id, pqRatio, perpLen }) => {\n      const edge = state.graph.edges.byId[id];\n      const p = vertexWip.unwrap()[edge.startVertexId].pos;\n      const q = vertexWip.unwrap()[edge.endVertexId].pos;\n      const pq = q.minus(p);\n      const proj = pq.scale(pqRatio);\n      const perp = proj.perp().normalize().scale(perpLen);\n      const controlPtPos = p.plus(proj).plus(perp);\n      return {\n        ...edge,\n        controlPtPos,\n      };\n    }\n  );\n  const edgeWip = state.graph.edges.wip.map(byId => ({\n    ...byId,\n    ...arrayToObj(updatedEdges),\n  }));\n\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      hasMoved: true,\n    },\n    graph: {\n      ...state.graph,\n      vertices: {\n        ...state.graph.vertices,\n        wip: vertexWip,\n      },\n      edges: {\n        ...state.graph.edges,\n        wip: edgeWip,\n      },\n    },\n  };\n}\n\nfunction updateEdgeWip(state: State, edgeId: EdgeId): State {\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      hasMoved: true,\n    },\n    graph: {\n      ...state.graph,\n      edges: {\n        ...state.graph.edges,\n        wip: state.graph.edges.wip.map(edges => ({\n          ...edges,\n          [edgeId]: {\n            ...state.graph.edges.byId[edgeId],\n            controlPtPos: state.ui.mousePos,\n          },\n        })),\n      },\n    },\n  };\n}\n\nfunction reduceAddVertex(state: State): State {\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      dragSubject: DragSubject.NewVertex(),\n    },\n  };\n}\n\nfunction reduceRemoveVertices(state: State, action: Action): State {\n  const vertices = Sel.allVertices(state);\n  const selectedVertexIds = action.payload;\n  const updatedVertices = vertices.filter(\n    v => !selectedVertexIds.includes(v.id)\n  );\n\n  const edges = Sel.allEdges(state);\n  const updatedEdges = edges.filter(\n    e =>\n      !selectedVertexIds.includes(e.startVertexId) &&\n      !selectedVertexIds.includes(e.endVertexId)\n  );\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      selection: Selection.None(),\n    },\n    graph: {\n      ...state.graph,\n      vertices: {\n        ...state.graph.vertices,\n        byId: arrayToObj(updatedVertices),\n      },\n      edges: {\n        ...state.graph.edges,\n        byId: arrayToObj(updatedEdges),\n      },\n    },\n  };\n}\n\nfunction reduceAddEdge(state: State, action: Action): State {\n  const { startVertexId, endVertexId } = action.payload;\n  const id = Sel.nextEdgeId(state);\n  const startVertexPos = Sel.vertexPos(state, startVertexId);\n  const endVertexPos = Sel.vertexPos(state, endVertexId);\n  const controlPtPos = endVertexPos\n    .minus(startVertexPos)\n    .scale(1 / 2)\n    .plus(startVertexPos);\n\n  const edge: Edge = {\n    id,\n    startVertexId,\n    endVertexId,\n    controlPtPos,\n    direction: EdgeDirection.None,\n  };\n\n  const byId = {\n    ...state.graph.edges.byId,\n    [id]: edge,\n  };\n\n  return {\n    ...state,\n    ui: { ...state.ui, selection: Selection.None() },\n    graph: {\n      ...state.graph,\n      edges: {\n        ...state.graph.edges,\n        byId,\n      },\n    },\n  };\n}\n\nfunction reduceRemoveEdge(state: State, action: Action): State {\n  const edgeId = action.payload;\n  const updated = Sel.allEdges(state).filter(e => e.id !== edgeId);\n  return {\n    ...state,\n    graph: {\n      ...state.graph,\n      edges: {\n        ...state.graph.edges,\n        byId: arrayToObj(updated),\n      },\n    },\n  };\n}\n\nfunction reduceShiftKeyDown(state: State): State {\n  return { ...state, ui: { ...state.ui, isMultiSelect: true } };\n}\n\nfunction reduceKeyUp(state: State): State {\n  // TODO Perform whatever other key actions need to be performed here\n  return { ...state, ui: { ...state.ui, isMultiSelect: false } };\n}\n\nfunction reduceCancelCurrentAction(state: State): State {\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      dragSubject: DragSubject.None(),\n    },\n    graph: {\n      ...state.graph,\n      vertices: {\n        ...state.graph.vertices,\n        wip: Option.None(),\n      },\n      edges: {\n        ...state.graph.edges,\n        wip: Option.None(),\n      },\n    },\n  };\n}\n\nfunction reduceSelectAllVertices(state: State): State {\n  const allVertexIds = Sel.allVertices(state).map(({ id }) => id);\n  return {\n    ...state,\n    ui: {\n      ...state.ui,\n      selection: Selection.Vertices(allVertexIds),\n    },\n  };\n}\n\nfunction reduceChangeVertexName(state: State, action: Action): State {\n  const { vertexId, name } = action.payload;\n  const byId = state.graph.vertices.byId;\n  const vertex = byId[vertexId];\n  const updatedVertices = { ...byId, [vertexId]: { ...vertex, name } };\n  return {\n    ...state,\n    graph: {\n      ...state.graph,\n      vertices: {\n        ...state.graph.vertices,\n        byId: updatedVertices,\n      },\n    },\n  };\n}\n\nfunction reduceMouseEnterVertex(state: State, action: Action): State {\n  return {\n    ...state,\n    graph: {\n      ...state.graph,\n      vertices: {\n        ...state.graph.vertices,\n        hovered: Option.Some(action.payload),\n      },\n    },\n  };\n}\n\nfunction reduceMouseLeaveVertex(state: State): State {\n  return {\n    ...state,\n    graph: {\n      ...state.graph,\n      vertices: {\n        ...state.graph.vertices,\n        hovered: Option.None(),\n      },\n    },\n  };\n}\n\nfunction reduceMouseEnterEdgeControlPt(state: State, action: Action): State {\n  return {\n    ...state,\n    graph: {\n      ...state.graph,\n      edges: {\n        ...state.graph.edges,\n        hovered: Option.Some(action.payload),\n      },\n    },\n  };\n}\n\nfunction reduceMouseLeaveEdgeControlPt(state: State): State {\n  return {\n    ...state,\n    graph: {\n      ...state.graph,\n      edges: {\n        ...state.graph.edges,\n        hovered: Option.None(),\n      },\n    },\n  };\n}\n\nfunction reduceToggleEdgeDirection(state: State, action: Action): State {\n  const edge = Sel.edgeById(state, action.payload);\n  const updatedEdge = toggleEdgeDirection(edge);\n  return {\n    ...state,\n    graph: {\n      ...state.graph,\n      edges: {\n        ...state.graph.edges,\n        byId: {\n          ...state.graph.edges.byId,\n          [edge.id]: updatedEdge,\n        },\n        wip: state.graph.edges.wip.map(byId => ({\n          ...byId,\n          [edge.id]: updatedEdge,\n        })),\n      },\n    },\n  };\n}\n\nfunction toggleEdgeDirection(edge: Edge): Edge {\n  switch (edge.direction) {\n    case EdgeDirection.None:\n      return { ...edge, direction: EdgeDirection.Forward };\n    case EdgeDirection.Forward:\n      return { ...edge, direction: EdgeDirection.Reverse };\n    case EdgeDirection.Reverse:\n      return { ...edge, direction: EdgeDirection.None };\n  }\n}\n\nfunction reduceCommitCurrentGraphState(state: State): State {\n  return {\n    ...state,\n    undoRedo: state.undoRedo.commit(state.graph),\n  };\n}\n\nfunction reduceUndo(state: State): State {\n  return state.undoRedo.undo().match({\n    none: () => state,\n    some: ([graph, undoRedo]) => ({\n      ...state,\n      ui: {\n        ...state.ui,\n        selection: undoRedoSelection(state, graph),\n      },\n      graph,\n      undoRedo,\n    }),\n  });\n}\n\nfunction reduceRedo(state: State): State {\n  return state.undoRedo.redo().match({\n    none: () => state,\n    some: ([graph, undoRedo]) => ({ ...state, graph, undoRedo }),\n  });\n}\n\nfunction undoRedoSelection(state: State, graph: GraphState): Selection {\n  return Sel.selection(state).match({\n    none: () => Sel.selection(state),\n    vertices: vertexIds => {\n      const allVertexIds = Object.values(graph.vertices.byId).map(\n        ({ id }) => id\n      );\n      return Selection.Vertices(\n        vertexIds.filter(id => allVertexIds.includes(id))\n      );\n    },\n  });\n}\n\nfunction reduceOpenGraphOverlay(state: State, action: Action): State {\n  return { ...state, overlay: OverlayState.Graph(action.payload) };\n}\n\nfunction reduceOpenErrorsOverlay(state: State, action: Action): State {\n  return { ...state, overlay: OverlayState.Errors(action.payload) };\n}\n\nfunction reduceDismissOverlay(state: State): State {\n  return { ...state, overlay: OverlayState.None() };\n}\n","import React from 'react';\nimport { StateContext, EdgeDirection } from './state';\nimport * as St from './state';\nimport { Vec } from './tools';\n\nexport interface EdgeProps {\n  id: number;\n  startVertexId: number;\n  endVertexId: number;\n  controlPtPos: Vec;\n  direction: EdgeDirection;\n}\n\nconst Edge: React.FC<EdgeProps> = props => {\n  const { state, dispatch } = React.useContext(StateContext);\n\n  const { startVertexId, endVertexId, controlPtPos: c, id, direction } = props;\n  const p = St.vertexPos(state, startVertexId);\n  const q = St.vertexPos(state, endVertexId);\n\n  const pq = q.minus(p);\n  const m = pq.scale(1 / 2);\n  const pc = c.minus(p);\n  const l = p.plus(pc.scale(2)).minus(m);\n\n  const isHovered = St.isEdgeControlPtHovered(state, id);\n\n  function handleMouseDown() {\n    return dispatch(St.mouseDownEdgeControlPt(id));\n  }\n\n  function handleMouseEnter() {\n    return dispatch(St.mouseEnterEdgeControlPt(id));\n  }\n\n  function handleMouseLeave() {\n    return dispatch(St.mouseLeaveEdgeControlPt());\n  }\n\n  function handleMouseUp() {\n    if (!St.hasMoved(state)) {\n      return dispatch(St.toggleEdgeDirection(id));\n    }\n  }\n\n  return (\n    <g>\n      <path\n        className=\"edge-path\"\n        d={`M ${p.x} ${p.y} Q ${l.x} ${l.y}, ${q.x} ${q.y}`}\n        strokeWidth=\"2\"\n        fill=\"none\"\n      />\n      <g\n        className=\"edge-control\"\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n      >\n        <circle cx={c.x} cy={c.y} r=\"12\" fill=\"transparent\" />\n        <circle\n          cx={c.x}\n          cy={c.y}\n          r={isHovered ? 14 : 4}\n          className=\"edge-control-point\"\n        />\n        ;\n        <Arrow c={c} pq={pq} direction={direction} />\n      </g>\n    </g>\n  );\n};\n\ninterface ArrowProps {\n  c: Vec;\n  pq: Vec;\n  direction: EdgeDirection;\n}\n\nconst Arrow: React.FC<ArrowProps> = ({ c, pq, direction }) => {\n  if (direction === EdgeDirection.None) {\n    return null;\n  }\n\n  const wingLength = 30;\n  const isForward = direction === EdgeDirection.Forward;\n  const arrowSpine = pq.normalize().scale(isForward ? -wingLength : wingLength);\n  const wing1 = arrowSpine.rotate(Math.PI / 10);\n  const wing2 = arrowSpine.rotate(-Math.PI / 10);\n  const w1 = c.plus(wing1);\n  const w2 = c.plus(wing2);\n\n  return (\n    <path\n      d={`M ${c.x} ${c.y} L ${w1.x} ${w1.y} L ${w2.x} ${w2.y}`}\n      className=\"edge-arrow\"\n      stroke=\"none\"\n    />\n  );\n};\n\nexport default Edge;\n","import React from 'react';\nimport * as St from './state';\nimport { Rect } from './tools';\n\nconst BoxSelection: React.FC<{}> = () => {\n  const { state } = React.useContext(St.StateContext);\n\n  return St.dragSubject(state).match({\n    boxSelection: rootPos => {\n      const rect = new Rect(rootPos, St.mousePos(state));\n\n      return (\n        <rect\n          x={rect.x}\n          y={rect.y}\n          width={rect.width}\n          height={rect.height}\n          className=\"box-selection\"\n        />\n      );\n    },\n    none: () => null,\n    vertices: () => null,\n    edgeControlPt: () => null,\n    newVertex: () => null,\n  });\n};\n\nexport default BoxSelection;\n","import React from 'react';\nimport { StateContext } from './state';\nimport * as St from './state';\n\nconst Actions: React.FC<{}> = () => {\n  const { state, dispatch } = React.useContext(StateContext);\n\n  const actions = St.availableActions(state);\n\n  function handleExport() {\n    St.exportMathematica(state).match({\n      err: errors => dispatch(St.openErrorsOverlay(errors)),\n      ok: graph => dispatch(St.openGraphOverlay(graph)),\n    });\n  }\n\n  return (\n    <div className=\"actions\">\n      <div className=\"actions-lhs\">\n        {actions.map((action, id) => (\n          <button key={id} onClick={() => dispatch(action.clickAction)}>\n            {action.name}\n          </button>\n        ))}\n      </div>\n      <div className=\"actions-rhs\">\n        <a\n          href=\"https://github.com/wjlewis/giraffe\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Source\n        </a>\n        <a\n          href=\"https://github.com/wjlewis/giraffe/blob/master/README.md\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Instructions\n        </a>\n        <button onClick={handleExport}>Export</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Actions;\n","import React from 'react';\nimport * as St from './state';\nimport { VERTEX_RADIUS } from './Vertex';\n\nconst NewVertex: React.FC<{}> = () => {\n  const { state, dispatch } = React.useContext(St.StateContext);\n\n  function handleMouseDown() {\n    return dispatch(St.mouseDownNewVertex());\n  }\n\n  return St.newVertexPos(state).match({\n    none: () => null,\n    some: pos => (\n      <circle\n        cx={pos.x}\n        cy={pos.y}\n        r={VERTEX_RADIUS}\n        onMouseDown={handleMouseDown}\n        strokeWidth=\"2\"\n        className=\"new-vertex\"\n      />\n    ),\n  });\n};\n\nexport default NewVertex;\n","import React from 'react';\nimport { StateContext } from './state';\nimport * as St from './state';\nimport { noOp } from './tools';\n\nconst Overlay: React.FC<{}> = () => {\n  const { state, dispatch } = React.useContext(StateContext);\n  const graphTextRef = React.useRef(null);\n  const [copying, setCopying] = React.useState(false);\n\n  const overlay = St.overlay(state);\n  if (overlay.isNone()) {\n    return null;\n  }\n\n  function dismiss(e: React.MouseEvent) {\n    if (e.currentTarget !== e.target) {\n      return;\n    }\n    dispatch(St.dismissOverlay());\n  }\n\n  function copyToClipboard() {\n    if (graphTextRef.current) {\n      const input = graphTextRef.current as any as HTMLInputElement;\n      input.focus();\n      input.select();\n      document.execCommand('copy');\n\n      setCopying(true);\n      setTimeout(() => {\n        setCopying(false);\n      }, 1000);\n    }\n  }\n\n  return (\n    <div id=\"overlay\" onClick={dismiss}>\n      {overlay.match({\n        none: () => {\n          throw new Error('unreachable');\n        },\n        graph: graph => (\n          <article className=\"graph-report\">\n            <p>Copy and paste the output below into a Mathematica document:</p>\n\n            <div className=\"graph-text-container\">\n              <input\n                ref={graphTextRef}\n                className=\"graph-text\"\n                value={graph}\n                onChange={noOp}\n              />\n              <button onClick={copyToClipboard} disabled={copying}>\n                {copying ? 'Copied!' : 'Copy'}\n              </button>\n            </div>\n\n            <button onClick={dismiss}>Dismiss</button>\n          </article>\n        ),\n        errors: errors => (\n          <article className=\"error-report\">\n            <p>\n              We were unable to export your graph for the following reasons:\n            </p>\n            <div className=\"errors\">\n              {errors.map((error, i) => (\n                <p className=\"error-text\" key={i}>\n                  {error}\n                </p>\n              ))}\n            </div>\n            <button onClick={dismiss}>Dismiss</button>\n          </article>\n        ),\n      })}\n    </div>\n  );\n};\n\nexport default Overlay;\n","import React from 'react';\nimport { useReducer, useMousePos, useKeyboard, useBounds } from './hooks';\nimport * as St from './state';\nimport { Vec } from './tools';\nimport Vertex from './Vertex';\nimport Edge from './Edge';\nimport BoxSelection from './BoxSelection';\nimport Actions from './Actions';\nimport NewVertex from './NewVertex';\nimport Overlay from './Overlay';\n\nconst App: React.FC<{}> = () => {\n  const [state, dispatch] = useReducer(\n    St.reducer,\n    St.initState,\n    St.dispatchKeyEvents(),\n    St.commitGraph()\n  );\n  const hostRef = React.useRef(null);\n  const { width, height } = useBounds(hostRef);\n  useMousePos(hostRef, pos =>\n    dispatch(St.mouseMove(new Vec(pos.x - width / 2, pos.y - height / 2)))\n  );\n  useKeyboard({\n    onKeyDown: info => dispatch(St.keyDown(info)),\n    onKeyUp: () => dispatch(St.keyUp()),\n  });\n\n  const transform = `translate(${width / 2} ${height / 2})`;\n\n  const edges = St.allEdges(state);\n  const vertices = St.allVertices(state);\n\n  function handleMouseDown(e: React.MouseEvent) {\n    if (e.currentTarget !== e.target) {\n      return;\n    }\n\n    return dispatch(St.mouseDownCanvas());\n  }\n\n  function handleMouseUp() {\n    return dispatch(St.mouseUp());\n  }\n\n  return (\n    <St.StateContext.Provider value={{ state, dispatch }}>\n      <main>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          ref={hostRef as any}\n          onMouseDown={handleMouseDown}\n          onMouseUp={handleMouseUp}\n        >\n          <g transform={transform}>\n            {edges.map(e => (\n              <Edge key={e.id} {...e} />\n            ))}\n\n            {vertices.map(v => (\n              <Vertex key={v.id} {...v} />\n            ))}\n\n            <BoxSelection />\n\n            <NewVertex />\n          </g>\n        </svg>\n      </main>\n\n      <footer>\n        <nav>\n          <Actions />\n        </nav>\n      </footer>\n\n      <Overlay />\n    </St.StateContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { Vec, noOp } from './tools';\nimport { Middleware } from './state';\n\nexport function useReducer<St, A>(\n  reducer: React.Reducer<St, A>,\n  initState: St,\n  ...middlewares: Middleware<St, A>[]\n): [St, React.Dispatch<A>] {\n  let [state, dispatch] = React.useReducer(reducer, initState);\n\n  middlewares = [...middlewares];\n  middlewares.reverse();\n  middlewares.forEach(middleware => {\n    dispatch = middleware(state, dispatch);\n  });\n\n  return [state, dispatch];\n}\n\nexport function useMousePos<E extends HTMLElement>(\n  ref: React.RefObject<E>,\n  onMove: (pos: Vec) => unknown\n) {\n  const [bounds, setBounds] = React.useState({ left: 0, top: 0 });\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const { left, top } = ref.current.getBoundingClientRect();\n      setBounds({ left, top });\n    }\n  }, [ref, setBounds]);\n\n  React.useEffect(() => {\n    const { left, top } = bounds;\n\n    function handleMouseMove(e: MouseEvent) {\n      onMove(new Vec(e.clientX - left, e.clientY - top));\n    }\n\n    document.addEventListener('mousemove', handleMouseMove);\n    return () => document.removeEventListener('mousemove', handleMouseMove);\n  }, [bounds, onMove]);\n}\n\nexport function useKeyboard(handlers: UseKeyboard) {\n  const { onKeyDown = noOp, onKeyUp = noOp } = handlers;\n\n  React.useEffect(() => {\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n\n      const { key, ctrlKey, metaKey } = e;\n      onKeyDown({ key, ctrlKey, metaKey });\n    }\n\n    function handleKeyUp() {\n      onKeyUp();\n    }\n\n    document.body.addEventListener('keydown', handleKeyDown);\n    document.body.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      document.body.removeEventListener('keydown', handleKeyDown);\n      document.body.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [onKeyDown, onKeyUp]);\n}\n\nexport interface UseKeyboard {\n  onKeyDown?: (info: KeyDownInfo) => unknown;\n  onKeyUp?: () => unknown;\n}\n\nexport interface KeyDownInfo {\n  key: string;\n  ctrlKey: boolean;\n  metaKey: boolean;\n}\n\nexport function useBounds<E extends HTMLElement>(\n  ref: React.RefObject<E>\n): Bounds {\n  const [bounds, setBounds] = React.useState({ width: 0, height: 0 });\n\n  const recomputeBounds = React.useCallback(() => {\n    if (ref.current) {\n      const { width, height } = ref.current.getBoundingClientRect();\n      return setBounds({ width, height });\n    }\n  }, [ref]);\n\n  React.useLayoutEffect(() => {\n    recomputeBounds();\n  }, [recomputeBounds]);\n\n  React.useEffect(() => {\n    window.addEventListener('resize', recomputeBounds);\n\n    return () => window.removeEventListener('resize', recomputeBounds);\n  }, [recomputeBounds]);\n\n  return bounds;\n}\n\nexport interface Bounds {\n  width: number;\n  height: number;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}